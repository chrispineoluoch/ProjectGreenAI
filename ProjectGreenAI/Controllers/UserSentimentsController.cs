using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using ProjectGreenAI.Data;
using ProjectGreenAI.Models;
using ProjectGreenAI.ModelViews.UserSentiments;
using static OpenAI.GPT3.ObjectModels.SharedModels.IOpenAiModels;

namespace ProjectGreenAI.Controllers
{
    public class UserSentimentsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public UserSentimentsController(ApplicationDbContext context)
        {
            _context = context;
        }

        public JsonResult GetSentiments(string conversationid, string dynamicid, string currentsentiment, UserSentiments userSentiments)
        {
            if (User.Identity != null && User.Identity.IsAuthenticated)
            {
                // This gets the current user's Id
                string? currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                var user = _context.Users.SingleOrDefault(u => u.Id == currentUserId);
                var capuserid = user?.Id.ToString();

                // This gets the current sentiment status of the user for the specific statement where the user clicked on the sentiment button
                var livesentiments = _context.UserSentimentsDbset?.AsEnumerable().Where(g => g.UserId?.ToString() == capuserid && g.ConversationId == conversationid).OrderBy(g => g.DateofCreation).FirstOrDefault();

                if (livesentiments == null)
                {
                    userSentiments.UserId = capuserid;
                    // This stores the actual Id(Key) of the specific statement generated by the AI in the consultations table
                    userSentiments.ConversationId = conversationid.ToString();
                    userSentiments.DynamicId = dynamicid.ToString();
                    userSentiments.SentimentStatus = currentsentiment;
                    userSentiments.DateofCreation = DateTime.Now.ToUniversalTime();
                    userSentiments.DateofStatusChange = DateTime.Now.ToUniversalTime();

                    string clientIp;
                    if (HttpContext.Request.Headers.ContainsKey("X-Forwarded-For"))
                        clientIp = HttpContext.Request.Headers["X-Forwarded-For"].ToString();
                    else
                        clientIp = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "IP not available";

                    userSentiments.IPAddress = clientIp;
                    _context.UserSentimentsDbset?.Add(userSentiments);
                    _context.SaveChanges();
                }
                else
                {
                    var cap_sentimentstatus = livesentiments.SentimentStatus;
                    livesentiments.DynamicId = dynamicid.ToString();
                    livesentiments.SentimentStatus = currentsentiment;
                    livesentiments.DateofStatusChange = DateTime.Now.ToUniversalTime();

                    string clientIp;
                    if (HttpContext.Request.Headers.ContainsKey("X-Forwarded-For"))
                        clientIp = HttpContext.Request.Headers["X-Forwarded-For"].ToString();
                    else
                        clientIp = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "IP not available";

                    livesentiments.IPAddress = clientIp;
                    _context.SaveChanges();
                }
                var response = "Success";
                return Json(response);
            }
            else
            {
                var response = "Create an account first";
                return Json(response);
            }
        }

        public JsonResult GetSentimentStatus()
        {
            if (_context.UserSentimentsDbset != null)
            {
                string currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                var user = _context.Users.SingleOrDefault(u => u.Id == currentUserId);
                var capuserid = user?.Id;

                var data = _context.UserSentimentsDbset.AsEnumerable()
               .Where(x => x.UserId == capuserid)
               .OrderByDescending(x => x.DateofCreation)
               .Select(s => new { dynamicid = s.DynamicId, sentimentstatus = s.SentimentStatus });

                return Json(data);
            }
            else
            {
                var data = new { Title = "There are no sentiments yet!" };

                return Json(data);
            }
        }

        private bool LikedResponseExists(int id)
        {
          return (_context.UserSentimentsDbset?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
